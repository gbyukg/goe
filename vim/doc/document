<C-S-v> 块可视模式

=== ctags、taglist、autotag =======================


=== ag ============================================
说明：
ag.vim是vim下一个强大的搜索工具，取代akc。使用ag.vim需要系统预先安装ag
ag地址：https://github.com/ggreer/the_silver_searcher/blob/master/doc/ag.1.md

常用命令：
Ag[!] [options] {pattern} [{directory}]
在给定的文件夹下递归搜索指定的模式，默认在当前文件夹下搜索
:Ag '\bport\b /document/gbyukg/git_sugar/Mango/ibm/dataloader/'

:AgAdd [options] {pattern} [{directory}]
同ag命令相同，只是将搜索的结果追加到当前搜索结果列表当中

:AgFromSearch [{directory}]
同ag命令相同，只是直接使用上次搜索时所用的查询样式

:LAg [options] {pattern} [{directory}]
同ag命令相同，只是搜索结果不显示在quickfix窗口而是在当前窗口中显示

:LAgAdd [options] {pattern} [{directory}]
AgAdd与LAg合体...

:AgFile [options] {pattern} [{directory}]
在给定的路径下递归所搜指定的文件名
快捷键映射：
o	打开文件(同回车作用一样)
go	预览文件(打开文件，但焦点停留在quickfix窗口)
t	在新标签中打开
T	在新标签中打开，但是不会切换标签焦点
h	水平分割窗口打开
H	水平分割窗口打开 不切换焦点
v	垂直分割窗口打开
V	垂直分割窗口打开 不切换焦点
q	关闭

=== syntastic ====================================
说明
一个强大的语法检测工具，支持几乎所有语言，并且支持自定义检测语法。

常用命令
:Errors
弹出错误窗口

:SyntasticToggleMode  
在主动检测和被动检测模式中切换

:SyntasticCheck
手动检测

:SyntasticInfo

=== vim-conque =================================
说明
在vim中执行系统一些工具，如bash，mysql等

常用命令
:ConqueTerm bash
:ConqueTerm mysql -h localhost -u joe_lunchbox Menu
:ConqueTerm Powershell.exe

:ConqueTermSplit
:ConqueTermVSplit
以分割窗口的方式打开新窗口

=== vim-surround ================================
说明
对包含字符串的引号或标签等进行快速操作
It's easiest to explain with examples. Press cs"' inside

"Hello world!"
to change it to

'Hello world!'
Now press cs'<q> to change it to

<q>Hello world!</q>
To go full circle, press cst" to get

"Hello world!"
To remove the delimiters entirely, press ds".

Hello world!
Now with the cursor on "Hello", press ysiw] (iw is a text object).

[Hello] world!
Let's make that braces and add some space (use } instead of { for no space): cs]{

{ Hello } world!
Now wrap the entire line in parentheses with yssb or yss).

({ Hello } world!)
Revert to the original text: ds{ds)

Hello world!
Emphasize hello: ysiw<em>

<em>Hello</em> world!
Finally, let's try out visual mode. Press a capital V (for linewise visual mode) followed by S<p class="important">.

<p class="important">
  <em>Hello</em> world!
</p>

=== vim-startify ========================================
说明
显示出最近文件打开的历史记录

常用命令
:Startify
:SLoad    load a session
:SSave    save a session
:SDelete  delete a session

=== calendar.vim--Matsumoto =============================
说明
日历插件

常用命令
:Calendar
:Calendar 8
:Calendar 2001 8

=== voogle =============================================
说明
在vim中通过指定的浏览器和搜索引擎进行搜索
搜索当前指针位置的单词，或者在视图模式下搜索选择的文字

常用命令
,gs

=== vim-visual-star-search =============================
说明
在视图模式下，使用#或*多选中的在当前文件下进行搜索

=== sudo ===============================================
说明
使用sudo编辑文件

常用命令
:e sudo:/etc/passwd

=== TComment ===========================================
说明
快速注释工具

常用命令
<c-_><c-_>   :: :TComment
<c-_><space> :: :TComment <QUERY COMMENT-BEGIN ?COMMENT-END>
<c-_>b       :: :TCommentBlock

=== session.vim ========================================
说明
保存vim session信息，增强vim内置的mksession功能

常用命令
:SaveSession
保存当前session，可提供一个名作为session名，默认名default
:OpenSession
打开一个指定的session，默认为default
:RestartVim
保存当前session，重新启动vim
:CloseSession
关闭所有窗口及buffer，在打开一个新文本文件
:DeleteSession
删除一个session
:ViewSession
查看session

=== vim-indent-guides =================================
说明
对代码的层级关系一目了然

常用命令
<leader>lg
:IndentGuidesToggle
打开/关闭
:IndentGuidesDisable 
在当前buffer中禁用此功能

=== vim-autoformat ===================================
说明
格式化代码

常用命令
,f

=== neocomplcache.vim =================================
说明
关键字提示

常用命令
:NeoComplCacheEnable
:NeoComplCacheDisable
:NeoComplCacheToggle
:NeoComplCacheClean

=== change-inside-surroundings.vim ====================
说明
快速修改标签或引号、括号等之间的内容

常用命令
<div>London Calling</div> 调用cit
{ death: "or glory!" } 调用ci{
还支持{}, (), "", ><, [], '', ``

=== tabular ============================================
说明
快速修复文件内容对齐功能

常用命令
:Tabularize 
<leader>a[=、:、(、)、[、]、{、}]

=== buffer explor ======================================
说明
buffer管理界面

常用命令
<leader>b :BufExplorer
<leader>B :BufExplorerVerticalSplit

=== gitv ===============================================
说明
查看git历史记录

常用命令
:[range]Gitv[!] [args]
:Gitv 打开新tab标签显示
:Gitv! 在当前buffer中显示
参数：
Flag commit描述
<since>..<until> 
--merges
-S<string>
-G<regex> 通过正在在diff中查找出相应的内容

nmap <leader>gv :Gitv --all<cr>
vmap <leader>gv :Gitv --all<cr>
nmap <leader>gV :Gitv! --all<cr>
vmap <leader>gV :Gitv! --all<cr>

=== vim-fugitive =======================================
说明
在vim下使用git命令

常用命令
:Git [args] 直接运行git命令
:Git! [args] 同:Git一样，只是将结果输出到新文件并在vim中显示该文件
:Gstatus 在新窗口中显示当前版本库的状态
该窗口下的一些命令：
                        <C-N> next file
                        <C-P> previous file
                        <CR>  |:Gedit|
                        -     |:Git| add
                        -     |:Git| reset (staged files)
                        cA    |:Gcommit| --amend --reuse-message=HEAD
                        ca    |:Gcommit| --amend
                        cc    |:Gcommit|
                        cva   |:Gcommit| --amend --verbose
                        cvc   |:Gcommit| --verbose
                        D     |:Gdiff|
                        ds    |:Gsdiff|
                        dp    |:Git!| diff (p for patch; use :Gw to apply)
                        dp    |:Git| add --intent-to-add (untracked files)
                        dv    |:Gvdiff|
                        O     |:Gtabedit|
                        o     |:Gsplit|
                        p     |:Git| add --patch
                        p     |:Git| reset --patch (staged files)
                        q     close status
                        R     reload status
                        S     |:Gvsplit|
