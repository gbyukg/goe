$：将光标移动到当前行的尾行，接收计数：2$将光标移动到下一行的尾行。
0：移动到当前行首行。
^：移动到当前行首行字母处。
(:移动到句首
):移动到句尾
{:移动到段首
}:移动到段尾

f:在当前行查找。fx在当前行查找x字符，接收命令计数。
F:反方向搜索。
t:与f类似，只不过不是把光标停留在被搜索的字符上，而是在它之前的一个字符上。
T:反方向搜索。
这4个命令都可以用";"和","重复同样的命令，而","方向与原命令相反。

%:匹配括号。即使当前光标没有停留在一个可用的括号字符上，"%"也会向前为它找到一个可用的括号字符。

G:移动到尾行。接收计数：5G 移动到第五行。
gg:移动到首行。
在%之前指定一个命令计数，同样可以移动到指定行，如：50%将会把光标移动到文件的中间。
上面给3个命令针对的是整个文件。如果只想操作当前屏幕中显示的区域，可使用如下操作：
H:移动到当前屏幕的首行。
M:移动到当前屏幕的中间行。
L:移动到当前屏幕的尾行。

CTRL-G：获取当前光标所在行的信息。

:set number:设定行好显示。
:set nonumber:关闭行好显示。
:set (no)ruler

CTRL-U:该命令使文本向下滚动半屏。
CTRL-D:该命令使文本向上滚动半屏。
CTRL-E:向上滚动一行。
CTRL-Y:向下滚动一行。
CTRL-F:向前滚动一整屏幕。
CTRL-B:向后滚动一整屏幕。

zz:将光标所在的当前行移动到屏幕中央处，这样，当光标处于屏幕中的最后行时，可以通过该命令查看该行后面的内容。
zt:将当前行移动到屏幕顶端。
zb:讲当前行移动到屏幕底端。

/string 用于简单搜索字符串。注：字符.*[]^%/?~$有特殊含义，如果要搜索这些字符，需要使用转意字符反斜杠。
?命令与/相同，只是反方向搜索。
n/N命令搜索

:set ignorecase 在搜索的时候忽略大小写
:set noignorecase

*/#:把光标移动到想要搜索的word上，按下*或#,vim就会将当前光标所在单词进行搜索。#与*查找方向相反。同时支持计数：3*查找当前光标下的word的第三出出现。

如果使用/the查找the单词，那么"there"也会被匹配。要超找作为独立单词的the使用如下命令：/the\>

:set (no)hlsearch:用于设定是否高亮显示搜索结果。

:set incsearch:该设定会使你在键如目标字符串的过程中Vim就同时开始搜索工作。

:set nowrapscan:该设置会使搜索过程在文件结束时就停止。或者，在你反响搜索时在到达文件开头时停止。默认"wrapscan"选先是开启状态，这样搜索在达到文件的头尾时都会绕向另一个方向继续进行。

:scriptnames 获取VIM所有的配置文件信息

简单搜索模式：一行的开头与结尾
^字符匹配一行的开头。象"include"这样的模式可以匹配出现在一行中任何位置的include这个单词。但模式"^include"就只匹配出现在一行开头的include
$字符匹配一样的末尾。所有"was$"只匹配位于一行末尾的单词was。
the solder holding one of the chips melted and the
xxx                       xxx                  xxx
^the 查找到第一the
the$ 查找到最后一个the
而：/^the$只有the在单独一行中，并且该行没有其它任何字符(包括空格)时才会匹配。

匹配任何单字符：
.这个字符可以匹配任何字符。如"c.m"可以匹配任何迁移个字符是c，后一个字符是m的情况。
如果所要查找的内容中包含"."，则需要使用转移字符："\."进行查找。

``:当使用G命令进行行之间的跳转时，VIM会记录你起跳位置。这个位置在VIM中是一个标记。使用该命令则会掉转到起跳位置。

CTRL-O:跳转到更早些时间停置光标的位置。
CTRL-I:跳回到后来停置光标的更新的位置。(与TAB键共同相同)
:jumps命令会列出关于你曾经跳转过的位置的列表。

创建标记：
ma 将当前光标所在位置定义一个名字为"a"的标记。从a到z一共可以使用26个自定义的标记。
使用"'"或"`"+a，即可跳转到此处，如：'a或`a
'a 会将当前光标移动到a标记行的行首。
`a 会将当前光标移动到标记a时所在的精确的行和列。

:marks 该命令会列出当前Vim中标记的列表。

c:与d命令类似，不过在命令执行后会进入insert模式。如：c2wgbyukg 删除后2个单词，插入gbyukg
cc:就像dd命令一样删除整行，不过会保存当前行的缩进。

x       代表dl(删除当前光标下的字符)
X       代表dh(删除当前光标左边的字符)
D       代表d$(删除到行尾的内容)
C       代表c$(修改到行尾的内容)
s       代表cl(修改一个字符)
S       代表cc(修改一整行)

命令"3dw"和"d3w"都是删除3个word.如果你真要钻牛角尖的话,第一个命令"3dw"可以看作是删除一个word的操作执行3次; 第二个命令"d3w"是一次删除3个word. 这是其中不明显的差异. 事实上你可以在两处都放上命令记数, 比如, "3d2w"是删除两个word, 重复执行3次, 总共是6个word.

r:等待键如一个字符，以替换当前光标所在字符。也可以使用cl或s完成同样的事，但r不需要使用Esc键回到Normal模式。
R:每个键如的字符都会替换掉当前光标下的字符。直到按下Esc键。

".":用于重复上一次做出的改动动作。如：删除文档中的所有<B>标签，将光标移动到<字符上，df>,然后移动到</B>上的<标签上，通过.命令去重复上次执行的删除操作。

Visual模式
按"v"键即可进入Visual模式，移动光标可以覆盖你想操纵的文本范围，最后键入操作符命令。如删除命令d
V:多行选择模式
CTRL+v:块选择区域
在visual模式下，可通过"o"进入到光标的另一头进行另一头的区域的更改。

移动文本
当通过"d"或"x"删除文本时，被删除的内容已经被保存起来，可以通过"p"命令将它取出来(Vim中叫做put)

文本复制
y:用于复制命令，如yw复制一个单词，y2w复制2个单词。yw复制的内容中包含了word后面的空白符，如果不想要它，可以使用ye来代替。
yy用来复制以整行，就像dd删除以整行一样。"Y"同样也是复制一整行的内容。

文本对象
删除一个单词，通常将光标移动到要删除单词的第一个字符下名，执行dw操作。另一种更简介的方法是："daw"
d仍是删除操作，"aw"意味这a word。
该操作最大的好处在于不用提前将光标移动到word的第一个字符处。
修改一整个句子：cis。"is"表示inner sentence。对应的还有一个"as"(a sentence)的文本对象。区别在于is不包括句子后面的空格，而as包括。如：das删除句子时将后面的空格同时删除掉。

~:用于改变当前光标所在字符的大小写，并将光标移动到下一个字符处。

修改VIM默认配置文件
通过命令：scriptnames查看vim配置文件信息，通常输出的第一行会有一个叫".vimrc"或"_vimrc"的文件。":version"命令也会列出Vim是在哪些目录寻找该文件的。在该配置文件中，可以包含任何你可以在冒号命令行上使用的命令。如想每次打开Vim时总是打开'incsearch'选项，就可以在配置文件中增加 set incsearch

常用设置命令说明：
set incsearch
set backspace(bs)=indent,eol,start      这条命令告诉Vim在Insert模式下退格键何时可以删除光标之前的字符. 选项中以逗号分隔的三项内容分别指定了Vim可以删除位于行首的空格, 断行, 以及开始进入Insert模式之前的位置.
set autoindent(ai)      设定在开始新行时对该行实施上一行的缩进方式
set backup      设定备份文件
set history=50  设置冒号命令和搜索命令的命令历史列表的长度
set ruler       总是在Vim窗口的右下角显示当前光标的行列信息
set showcmd     在Vim窗口右下角
set hlsearch    高亮显示所有与最后一次搜索目标串相匹配的文本
set nowrap      不自动换行
set sidescroll=10       每次屏幕右滚时，滚动10个字符供你查看
set whichwrap=b,s       这样光标位于行首时按退格键会往回移动到上一行的行尾. 同时在行尾按空格键也会移动到下一行的行首.
set (no)list    文件中含有制表符时，默认不过显示，通过该命令可显示制表符
set listchars=tab:>-,trail:-    现在每个制表符都会以">-"显示，同时行尾空格以"-"显示。
set iskeyword
iskeyword=@,48-57,_,192-255 >
"iskeyword"选项定义了一个word中可以包含哪些字符：
"@"在这里代指所有的字母。"48-57"指ASCII码从48到57的哪些字符，即0到9."192-255"是可打印拉丁字母
set cmdheight=2 Vim默认窗口底部留下一行用于显示信息。要显示的信息太长时，im或者把它截短让你只能看到部分内容, 或者多出来的信息需要你按下回车键以滚动显示.通过该设定，可以设定窗口底部用于显示信息区域的行数为2行，但会相应减少编辑区的行数。
syntax enable   打开颜色
filetype plugin indent on       该命令开启了Vim的三种智能：
        1.自动识别文件类型
                当你开始编辑一个文件时，Vim就会自动识别它是何种类型的文件。如：打开一个main.c文件，Vim就会根据它的扩展名'.c'知道它是一个类型为"c"的C语言源程序文件。当你编辑一个文件其第一行是"#!/bin/sh"时, Vim又可以据此判断它是一个类型为"sh"的shell脚本文件.

        2.用文件类型plugin脚本
                不同的文件类型需要搭配适合于它1 的编辑选项. 比如说你在编辑一个"c"文件, 那么打开'cindent'就非常有用. 这些对某种文件类型来说最常用的选项可以放在一个Vim中叫文件类型plugin的脚本里.你还可以加上你自己写的

        3.使用缩进定义文件
                编辑程序的时候, 语句的缩进可以让它自动完成. Vim为众多不同的文件类型提供了相应的缩进方案. 请参考|filetype-indent-on|和'indentexpr'选项.

简单的映射：
:map <F5> i{<Esc>ea}<Esc>
该映射定义了映射的功能键为:F5. 当按下F5时，首先执行i命令进入insert模式，{用于插入'{'字符，<Esc>调用Esc按键退出insert模式，e将光标移动到当前word的最后一个字符，a命令将光标向后移动一位并进入insert模式，'}'插入'}'字符，最后调用Esc按键退出insert模式。
":map"命令不带参数，会列出当前已定义的映射。

Vim的plugin设定：
plugin分为两类：
        全局的：用于所有文件
        专用的：用于特定类型的一类文件


语法高亮
:colorscheme evening    用于设定颜色主题，Vim所有颜色配置主题存储在vim/share/vim/vim73/colors文件夹下

自定义颜色方案：
首先在~目录下建立一个".vim/colors"文件夹，用于存放自定义颜色配置方案。
颜色配置文件几个主要选项说明：
term    黑白终端的显示属性
cterm   彩色终端的显示属性
ctermfg 彩色终端的前景色
ctermbg 彩色终端的背景色
gui     GUI的显示属性
guifg   GUI的前景色
guibg   GUI的背景色
网络配色方案：http://code.google.com/p/vimcolorschemetest/

编辑多个文件
:edit fileName 此时Vim会关闭当前打开的文件，同时打开fileName文件。如果调用edit时当前文件修改但并为保存，则会提示错误信息让你保存当前文本内容。可以通过在:edit! fileName强制退出当前文本并打开fileName文本。
如果你想编辑另一个文件，但又不想保存当前文件中改动的内容，可以使当前文档变为一个隐藏的缓冲区：
:hide edit foo.txt

vim one two three       该命令会同时打开3个文件，但只会显示one文件内容。
:next   命令用于开始下一个文件的编辑。如果当前文件有未保存的内容，同样会提示错误。通过:next!强制切换到下一个文件。
:wnext  命令完成了:write和:next2个命令
:args   命令会列出当前列表中有哪些文件，同时用"[]"将当前文件名括起来。
:previous       回到上一个文件。(:wprevious)
:last   到最后一个文件
:first  到第一个文件
:2next  跳过2个文件

:set (no)autowrite      通过该命令告诉Vim当跳转文件时是否自动保存当前文本内容
CTRL-^ 可以在2个文件中进行快速切换
~. 该标记会将你带到上一次更改文件时的位置
~" 该标记会将你带到上次你离开该文件时光标所在的位置

备份
:set backup     通常Vim不会生成备份文件，可以通过该命令打开Vim自动备份功能。备份文件名是在原文件名后面加一个~来命名的。如有意个file.c文件，备份后会生成一个file.c~的备份文件。
:set backupext=.bak     可以通过该命令自定义备份文件名。该例生成file.c.bak文件。

:set patchmode=.orig    该命令可以让Vim保存原始文件，它指定了该备份文件原始版本的文件的扩展名。例如：你第一次修改data.txt文件，保存时Vim会保留一份该文件的原始版本在data.txt.orig中，再次修改时，Vim会注意到data.txt.orig文件已经存在，后续生成的备份文件将被命名为data.txt~(或者backupext指定的后缀名)
如果patchmode置成空，则不会保存文件的原始副本
:write>>logfile 该命令可将当前文件内容以追加的方式追加到logfile文件的末尾

查看文件
vim -R file     以只读的方式打开文件。但是此时同样可以修改该文件内容，只要在:write后面加上"!"来前置保存即可。
保存新文件
:saveas file_2.c        该命令可以将当前文本文件的内容保存至file_2.c的文件中，同时此时所有对文件的修改操作，都是针对file_2.c文件进行操作的。
如果你只是想修改当前正在编辑的文件名，但是不想保存该文件，就可以使用命令:file move.c

分隔窗口
:split  命令将屏幕分为上下两个窗口并将光标移动到上面的窗口中。默认使用该命令会将当前文本文件在新窗口中打开，可以在该命令后指定一个文件名，用于打开指定的文件。
:vsplit 命令将屏幕分为所有两个窗口
:close  关闭当前所在窗口。实际上象命令:quit和ZZ都可以关闭窗口，但使用:close可以阻止你关闭最后一个Vim，以免意外关闭整个Vim。
:only   该命令用于关闭除当前窗口外的其它所有的窗口。
:new    该命令会打开一个新的空文件。
:vnew   该命令用于在垂直窗口中打开一个新的空文件。
切换窗口：
CTRL-W h/j/k/l/t/b 用于切换左/下/上/右/顶部/底部窗口。
移动窗口：
CTRL-W H/J/K/L  用于将窗口向左/下/上/右进行移动。
针对所有窗口进行操作
:qall/:wall/:wqall/:qall!
在使用Vim打开多个文件时，可以添加一个"-o"选项，使每一个文件都打开一个窗口，水平排列，大写字母"O"属性可使窗口以垂直方式打开。
vimdiff 用于比较两个文件之间的不同，如：vimdiff a.c b.c
