" 一般设定{
    set vb t_vb=                    " 关闭VIM警报声
    set tabpagemax=15               " Only show 15 tabs
    set showmode                    " Display the current mode
    set cursorline                  " Highlight current line
    set linespace=0                 " No extra spaces between rows
    set winminheight=0              " Windows can be 0 line high
    set wildmenu                    " Show list instead of just completing
    set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
    set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
    set scrolljump=0                " Lines to scroll when cursor leaves screen
    set scrolloff=8                 " Minimum lines to keep above and below cursor
    set sidescrolloff=15
    set sidescroll=1
    set foldenable                  " Auto fold code
    set list
    set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace
    set mousehide               " Hide the mouse cursor while typing

    let g:NERDShutUp=1

    set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
    set splitright                  " 竖向窗口在右侧打开
    set splitbelow                  " 横向窗口在下端打开

    " Always switch to the current file directory
    autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | lcd %:p:h | endif

    let view_dir = $HOME . '/.data/vimviews'
    exec "set viewdir" . "=" . view_dir

    if finddir(view_dir) == ''
        silent call mkdir(backup_dir)
    endif

    if has('gui_running')
        set lines=999 columns=999
        set transparency=5
    endif
" }


" key mapping{
    nnoremap <silent> <C-k>              :wincmd k<CR>
    nnoremap <silent> <C-j>              :wincmd j<CR>
    nnoremap <silent> <C-h>              :wincmd h<CR>
    nnoremap <silent> <C-l>              :wincmd l<CR>
    inoremap <silent> <C-k>         <Esc>:wincmd k<CR>
    inoremap <silent> <C-j>         <Esc>:wincmd j<CR>
    inoremap <silent> <C-h>         <Esc>:wincmd h<CR>
    inoremap <silent> <C-l>         <Esc>:wincmd l<CR>
    nnoremap <silent> <C-Up>             :wincmd k<CR>
    nnoremap <silent> <C-Down>           :wincmd j<CR>
    nnoremap <silent> <C-Left>           :wincmd h<CR>
    nnoremap <silent> <C-Right>          :wincmd l<CR>
    inoremap <silent> <C-Up>        <Esc>:wincmd k<CR>
    inoremap <silent> <C-Down>      <Esc>:wincmd j<CR>
    inoremap <silent> <C-Left>      <Esc>:wincmd h<CR>
    inoremap <silent> <C-Right>     <Esc>:wincmd l<CR>

    " Wrapped lines goes down/up to next row, rather than next line in file.
    noremap j gj
    noremap k gk

    " Shortcuts
    " Change Working Directory to that of the current file
    cmap cwd lcd %:p:h
    cmap cd. lcd %:p:h

    " Visual shifting (does not exit Visual mode)
    vnoremap < <gv
    vnoremap > >gv

    " Allow using the repeat operator with a visual selection (!)
    " http://stackoverflow.com/a/8064607/127816
    vnoremap . :normal .<CR>

    " For when you forget to sudo.. Really Write the file.
    cmap w!! w !sudo tee % >/dev/null

    " Map <Leader>ff to display all lines with keyword under cursor
    " and ask which one to jump to
    nmap <Leader>ff [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>

    " Easier horizontal scrolling
    map zl zL
    map zh zH

    " 保存
    nnoremap <leader>w :w<cr>
    inoremap <leader>w <C-c>:w<cr>
    nnoremap <leader>wq :wq<cr>
    inoremap <leader>wq <C-c>:wq<cr>

    " 退出
    noremap <leader>q :q<cr>

    " 切换tab
    noremap <S-l> gt
    noremap <S-h> gT

    " 宏
    nnoremap Q @q
    vnoremap Q :norm @q<cr>

    " 切换paste模式, 用于复制
    set pastetoggle=<leader>z

    " 快速对齐段落
    noremap <leader>a =ip

    " 快速复制当前光标所在段落到下一个段落
    noremap cp yap<S-}>p
"}

" function {
" 自动关闭NERDTree窗口
autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()
function! s:CloseIfOnlyNerdTreeLeft()
  if exists("t:NERDTreeBufName")
    if bufwinnr(t:NERDTreeBufName) != -1
      if winnr("$") == 1
        q
      endif
    endif
  endif
endfunction
"}
