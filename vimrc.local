set scrolljump=0                " Lines to scroll when cursor leaves screen
set scrolloff=8                 " Minimum lines to keep above and below cursor
set sidescrolloff=15
set sidescroll=1
setlocal nospell

" key mapping {
    iunmap <CR>
    nmap <leader>Sc :SyntasticCheck<CR>
    nmap <F5> :SyntasticReset<CR>

    nnoremap <silent> <C-k>              :wincmd k<CR>
    nnoremap <silent> <C-j>              :wincmd j<CR>
    nnoremap <silent> <C-h>              :wincmd h<CR>
    nnoremap <silent> <C-l>              :wincmd l<CR>
    inoremap <silent> <C-k>         <Esc>:wincmd k<CR>
    inoremap <silent> <C-j>         <Esc>:wincmd j<CR>
    inoremap <silent> <C-h>         <Esc>:wincmd h<CR>
    inoremap <silent> <C-l>         <Esc>:wincmd l<CR>
    nnoremap <silent> <C-Up>             :wincmd k<CR>
    nnoremap <silent> <C-Down>           :wincmd j<CR>
    nnoremap <silent> <C-Left>           :wincmd h<CR>
    nnoremap <silent> <C-Right>          :wincmd l<CR>
    inoremap <silent> <C-Up>        <Esc>:wincmd k<CR>
    inoremap <silent> <C-Down>      <Esc>:wincmd j<CR>
    inoremap <silent> <C-Left>      <Esc>:wincmd h<CR>
    inoremap <silent> <C-Right>     <Esc>:wincmd l<CR>

    imap <S-Space> <Esc>
    noremap <silent> <S-u>               :UndotreeToggle<CR>

    nmap <leader>bl :buffers<CR>
    nmap <leader>bw :bw<CR>
    noremap <silent> <A-RIGHT>   :bprevious<CR>
    noremap <silent> <A-LEFT> :bNext<CR>
    noremap <silent> <Leader>z   :bprevious<CR>
    noremap <silent> <Leader>x :bNext<CR>
    inoremap <silent> <A-RIGHT>   <Esc>:bprevious<CR>
    inoremap <silent> <A-LEFT> <Esc>:bNext<CR>
    nmap <leader>bb :Unite buffer<CR>

    nmap <silent> <C-p> :CtrlP<CR>
    nmap <silent> <C-b> :CtrlPBuffer<CR>
    nmap <silent> <C-m> :CtrlPMRU<CR>

    noremap <leader>f :Autoformat<CR><CR>

    if !exists("g:toggle_list_no_mappings")
        nmap <F3> :call ToggleLocationList()<CR>
        nmap <F4> :call ToggleQuickfixList()<CR>
    endif

    command Info execute "echo expand('%:p')"
" }

" vim-session {
    let g:session_directory = spf13_consolidated_directory . 'session'
    let g:session_autosave = 'yes'
" }

" NERDTree {
    nmap <silent> <C-e> :NERDTreeToggle<CR>
    "let g:nerdtree_tabs_open_on_gui_startup=1
    let g:NERDTreeChDirMode = 2
    "let g:nerdtree_tabs_open_on_new_tab = 1
    if has('gui_running')
        if has("gui_gtk2")
            let NERDTreeQuitOnOpen=0
        endif
    endif
    if has('gui_macvim')
        let NERDTreeQuitOnOpen=0
    endif
" }

" vim-indent-guides {
    let g:indent_guides_enable_on_vim_startup = 1
    let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
    hi IndentGuidesOdd  ctermbg=black
    hi IndentGuidesEven ctermbg=darkgrey
    "let g:indent_guides_auto_colors = 0
    "autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=3
    "autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
" }

" Autoformat "https://github.com/Chiel92/vim-autoformat" {
    let g:formatprg_args_expr_cppatprg_php = "phpCB"
    let g:formatprg_args_expr_php = '"--space-after-if --space-after-switch --space-after-while --space-before-start-angle-bracket --space-after-end-angle-bracket --extra-padding-for-case-statement --one-true-brace-function-declaration --glue-amperscore --change-shell-comment-to-double-slashes-comment --force-large-php-code-tag --force-true-false-null-contant-lowercase --align-equal-statements --align-equal-statements-to-fixed-pos --comment-rendering-style PEAR %:p"'
    " 使用pg_format工具格式化SQL
    " :exe "1,$!pg_format %:p"
    let g:formatprg_sql = "pg_format"
    let g:formatprg_args_expr_sql = '"%:p"'
" }

" syntastic {
    " 行号左边状态栏错误标志
    let g:syntastic_enable_signs=1
    let g:syntastic_error_symbol='✗'
    let g:syntastic_warning_symbol='⚠'
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_always_populate_loc_list=1 "Always put errors in the location list
    let g:syntastic_enable_balloons = 1
    let g:syntastic_check_on_wq = 0          " donot check when :wq, :x and :ZZ
    "let g:syntastic_debug = 1
    "let g:syntastic_check_on_open=1         " Always check when buffers are opened

    " C语法检测工具
    let g:syntastic_c_checkers = ['gcc']    " Use gcc as default syntax checker"
    let g:ycm_global_ycm_extra_conf = $HOME . '/.goe/ycm_extra_conf.py'
    "let g:syntastic_c_checkers = ['make', 'gcc', 'sparse', 'splint']

    " PHP语法检测工具
    let g:syntastic_php_checkers = ['php']
    "let g:syntastic_php_checkers = ['php','phpcs', 'phpmd']

    " JS语法检测工具
    "let g:syntastic_javascript_jshint_conf="/home/gbyukg/.jshintrc"
    let g:syntastic_jshint_exec = "jshint"
    let g:syntastic_javascript_checkers = ['jshint']

    " bash shell 语法检测工具
    "let g:syntastic_sh_exec = $HOME . "/.cabal/bin/shellcheck"
    let g:syntastic_sh_checkers = ['shellcheck', 'sh']

    " HTML,xHTML语法检测工具
    "let g:syntastic_javascript_checkers = ['jshint'] 
" }

" phpqa {
    " Don't run messdetector on save (default = 1)
    let g:phpqa_messdetector_autorun = 0

    " Don't run codesniffer on save (default = 1)
    let g:phpqa_codesniffer_autorun = 0

    " Show code coverage on load (default = 0)
    let g:phpqa_codecoverage_autorun = 0
" }

" PIV {
    let g:DisableAutoPHPFolding = 1
" }

" syntastic {
    let g:UltiSnipsUsePythonVersion = 2
" }

" youcompleteme {
    let g:ycm_semantic_triggers =  {
        \   'c' : ['->', '.'],
        \   'objc' : ['->', '.'],
        \   'ocaml' : ['.', '#'],
        \   'cpp,objcpp' : ['->', '.', '::'],
        \   'perl' : ['->'],
        \   'cs,java,javascript,d,vim,python,perl6,scala,vb,elixir,go' : ['.'],
        \   'ruby' : ['.', '::'],
        \   'lua' : ['.', ':'],
        \   'erlang' : [':'],
        \ }
        " 关闭php 'php' : ['->', '::'],
" }

" UltiSnips{
    " UltiSnips completion function that tries to expand a snippet. If there's no
    " snippet for expanding, it checks for completion window and if it's
    " shown, selects first element. If there's no completion window it tries to
    " jump to next placeholder. If there's no placeholder it just returns TAB key 
    function! g:UltiSnips_Complete()
        call UltiSnips_ExpandSnippet()
        if g:ulti_expand_res == 0
            if pumvisible()
                return "\<C-n>"
                "return "\<Enter>"
            else
                call UltiSnips_JumpForwards()
                if g:ulti_jump_forwards_res == 0
                   return "\<TAB>"
                endif
            endif
        endif
        return ""
    endfunction

    au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
    let g:UltiSnipsJumpForwardTrigger="<tab>"
    let g:UltiSnipsExpandTrigger="<C-e>"
" }

" cscope {
    if has("cscope")
            set csto=0                      " First search cscope database, then ctag file 
            set cst                         " Always use cscope instead of ctag
            set nocsverb                    " Don't be verbose
            if filereadable("cscope.out")
                    cs add cscope.out
            elseif $CSCOPE_DB != ""
                    cs add $CSCOPE_DB
            endif
            set csverb
            "nmap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR> 
            "nmap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR> 
            "nmap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR> 
            "nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR> 
            "nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR> 
            "nmap <C-@>f :cs find f <C-R>=expand("<cfile>")<CR><CR> 
            "nmap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
            "nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>
            "" Opens the tag in a new window on the right
            "nmap <C-@>S :rightb vert scs find s <C-R>=expand("<cword>")<CR><CR>
            "nmap <C-@>G :rightb vert scs find g <C-R>=expand("<cword>")<CR><CR>
            "nmap <C-@>C :rightb vert scs find c <C-R>=expand("<cword>")<CR><CR>
            "nmap <C-@>T :rightb vert scs find t <C-R>=expand("<cword>")<CR><CR>
            "nmap <C-@>E :rightb vert scs find e <C-R>=expand("<cword>")<CR><CR>
            "nmap <C-@>F :rightb vert scs find f <C-R>=expand("<cfile>")<CR><CR>
            "nmap <C-@>I :rightb vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
            "nmap <C-@>D :rightb vert scs find d <C-R>=expand("<cword>")<CR><CR>
    endif
" }

" minibufexpl{
    if exists(":MBEbn")
        let g:miniBufExplorerAutoStart = 1
        let g:miniBufExplBuffersNeeded = 0
        let g:miniBufExplMapWindowNavVim = 1
        let g:miniBufExplMapWindowNavArrows = 1
        let g:miniBufExplMapCTabSwitchBufs = 1
        let g:miniBufExplModSelTarget = 1
        let g:miniBufExplUseSingleClick = 1
        let g:miniBufExplCycleArroun = 1
        let g:miniBufExplCloseOnSelect = 0
        let g:miniBufExplBRSplit = 0

        noremap <silent> <A-RIGHT>   :MBEbn<CR>
        noremap <silent> <A-LEFT> :MBEbp<CR>
        inoremap <silent> <A-RIGHT>   <Esc>:MBEbn<CR>
        inoremap <silent> <A-LEFT> <Esc>:MBEbp<CR>
    endif
" }

" vim-airline{
    "let g:airline#extensions#tabline#buffer_min_count = 0
    let g:airline_symbols = {}
    let g:airline_left_sep = '⮀'
    let g:airline_left_alt_sep = '⮁'
    let g:airline_right_sep = '⮂'
    let g:airline_right_alt_sep = '⮃'
    let g:airline_symbols.branch = '⭠'
    let g:airline_symbols.readonly = '⭤'
    let g:airline_symbols.linenr = '⭡'
    "let g:airline_theme='powerlineish'
    "let g:airline_theme='murmur'
    let g:airline_theme='bubblegum'
"}

" startify{
    " 设定读取session的路径
    let g:startify_session_dir = spf13_consolidated_directory . 'session'
    " 显示保存的session
    let g:startify_show_sessions = 1
    " 显示的条数
    let g:startify_show_files_number = 15
    let g:startify_skiplist_server = []
"}

" YouCompleteMe {
    " let g:ycm_extra_conf_globlist = $HOME . '/.goe/ycm_extra_conf.py'
    " let g:ycm_server_use_vim_stdout = 1
    " let g:ycm_server_log_level = 'debug'
" }

" VDebug {
    let g:vdebug_options = {}
    let g:vdebug_options["debug_file"] = spf13_consolidated_directory . 'debug'
    let g:vdebug_keymap = {
        \    "break_on_open" : 1,
        \    "set_breakpoint" : "<F1>",
        \    "close" : "<F3>",
        \    "detach" : "<F4>",
        \    "step_into" : "<F5>",
        \    "step_over" : "<F6>",
        \    "run_to_cursor" : "<F7>",
        \    "run" : "<F8>",
        \    "step_out" : "<F9>",
        \    "get_context" : "<F10>",
        \    "eval_under_cursor" : "<F11>",
        \    "eval_visual" : "<Leader>e",
        \}
" }

" CtrlP{
    let g:ctrlp_cache_dir = spf13_consolidated_directory . 'ctrlp'
    let g:ctrlp_max_files = 0
    let g:ctrlp_max_depth = 0
    let g:ctrlp_mruf_max = 250
    " 只显示当前目录下的最近打开过的文件
    let g:ctrlp_mruf_relative = 1
    let g:ctrlp_prompt_mappings = { 'ToggleMRURelative()': ['<F3>'] }
    unmap <CR>
" }

" vim-buffergator{
    let g:buffergator_viewport_split_policy = "T"
" }

" tagbar {
    nnoremap <silent> <S-t> :TagbarToggle<CR>
    let g:tagbar_autofocus = 1
    let g:tagbar_show_visibility = 0
" }
:function ToggleWrap()
: if (&wrap == 1)
:   if (&linebreak == 0)
:     set linebreak
:   else
:     set nowrap
:   endif
: else
:   set wrap
:   set nolinebreak
: endif
:endfunction
map <F6> :call ToggleWrap()<CR>

" 设置gvim字体与主题
if has('gui_running')
    if has("gui_gtk2")
        set guifont=\Consolas\ for\ Powerline\ Regular\ 11,Andale\ Mono\ Regular\ 12,Menlo\ Regular\ 15,Consolas\ Regular\ 16,Courier\ New\ Regular\ 18
        " http://vimcolorschemetest.googlecode.com/svn/html/index-html.html
        :color molokai "asu1dark nightshimmer asmdev navajo-night eclm_wombat darkslategray asmdev
        " 最大化窗口
        set lines=999 columns=999
    elseif has("gui_macvim")
        set clipboard+=unnamed
        set vb t_vb=
        "set guioptions-=m  "no menu
        "set guioptions-=T  "no toolbar
        set guioptions-=l
        set guioptions-=L
        set guioptions-=r  "no scrollbar
        set guioptions-=R

        nmap <D-p> :CtrlP<CR>
        nmap <D-r> :CtrlPBuffer<CR>
    endif
        set guifont=Ayuthaya:h12,Andale\ Mono:h13,Source\ Code\ Pro\ for\ Powerline:h18,Menlo\ Regular:h13,Consolas\ Regular:h16,Courier\ New\ Regular:h18
        let macvim_skip_colorscheme=1
        let g:molokai_original=1
        colorscheme molokai
        highlight SignColumn guibg=#272822       "let g:rehash256 = 1
        " 最大化窗口
        set lines=999 columns=999
        "set transparency=0
        "set linespace=2
        "set background=dark
        "colorscheme solarized
        ":color solarized fruity bensday asu1dark asmdev nightshimmer asmdev navajo-night eclm_wombat darkslategray asmdev
        "let g:molokai_original = 1
endif

set exrc
set secure
